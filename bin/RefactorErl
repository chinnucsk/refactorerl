#!/usr/bin/env escript

%%% The  contents of this  file are  subject to  the Erlang  Public License,
%%% Version  1.1, (the  "License");  you may  not  use this  file except  in
%%% compliance  with the License.  You should  have received  a copy  of the
%%% Erlang  Public License  along  with this  software.  If not,  it can  be
%%% retrieved at http://plc.inf.elte.hu/erlang/
%%%
%%% Software  distributed under  the License  is distributed  on an  "AS IS"
%%% basis, WITHOUT  WARRANTY OF ANY  KIND, either expressed or  implied. See
%%% the License  for the specific language governing  rights and limitations
%%% under the License.
%%%
%%% The Original Code is RefactorErl.
%%%
%%% The Initial Developer of the  Original Code is Eötvös Loránd University.
%%% Portions created  by Eötvös  Loránd University are  Copyright 2009,
%%% Eötvös Loránd University. All Rights Reserved.


%%%        RefactorErl CMD interface (prototype 0.0.1)
%%%        This is not a stable final version!
%%%
%%%        Configure:
%%%
%%%        bin/RefactorErl escript 'rwx'
%%%        bin/starttool shell script 'rwx'
%%%
%%%        set the path of the RefactorErl (~/path)
%%%        into the refpath/0 function (in this module).
%%%        write into your .bashrc file the following alias:
%%%        alias refactorerl='/pathtorefactorerl/bin/RefactorErl'
%%%
%%%        Usage:
%%%
%%%        refactorerl mod fun "params"
%%%        refactorerl fun "params"
%%%        refactorerl fun
%%%
%%%        refactorerl start | stop | reset
%%%        refactorerl q "mods.funs[name==f].spec"
%%%        refactorerl query "show number_of_fun for module ('mod')"
%%%        refactorerl graph "pathtofile/mod.dot"
%%%

%%% @author Roland Kiraly <kiralyroland@inf.elte.hu>

%%% UI message callback
 -record(msg_cb,{unicast,broadcast}).

refpath() ->
   "".

epmdStart()->
   Pid = spawn(os,cmd,[os:find_executable("epmd")++" -daemon"]),
   %%TODO: need something instead of sleep/1 to wait until epmd is up!
   timer:sleep(1000),
   {ok, Start} = net_kernel:start([shell, shortnames]),
   %% <- Temporary debug info ->
   io:format("::epmd is up ~w~n::~w",[Pid, Start]),
   ok.

main([Fun])->
   epmdStart(),
   try
     Result = rpc_call(to_atom(Fun)),
     handleResult(Result)
   catch
     ErrH:ErrT-> handleResult({error, ErrH, ErrT})
   end;
main([Fun, Param])->
   net_kernel:start([shell, shortnames]),
   try
     Result = rpc_call(to_atom(Fun), Param),
     handleResult(Result)
   catch
     ErrH:ErrT-> handleResult({error, ErrH, ErrT})
   end;
main([Mod, Fun, Param])->
   net_kernel:start([shell, shortnames]),
   try
     Result = rpc_call(to_atom(Mod),
                       to_atom(Fun),
                       Param),
     handleResult(Result)
   catch
     ErrH:ErrT-> handleResult({error, ErrH, ErrT})
   end;
main([])-> 
    handleResult({{format,"~s~n"}, 
                          "not enough parameters"}).


%=============== Remote procedure calls ====================

rpc_call(start) ->
    case net_adm:ping(refactorerl@localhost) of
       pong -> {{format, "~s~n"}, "RefactorErl alredy started"};
          _ -> refactorerl_internal(start)
    end;
        
rpc_call(reset) ->
    case net_adm:ping(refactorerl@localhost) of
       pong -> refactorerl_internal(reset);
       pang -> pang;
       _-> refactorerl_internal(start)
    end;
            
rpc_call(stop) ->
     case net_adm:ping(refactorerl@localhost) of
        pong -> refactorerl_internal(stop);
           _ -> {{format, "~s~n"}, "not running"}
    end;
      
rpc_call(Fun) ->
   rpc:call(refactorerl@localhost,ri, Fun, []).
   
rpc_call(add, FileName) ->
   rpc:call(refactorerl@localhost, refcore_fileman, add_file, 
               [FileName]);
               
rpc_call(drop, FileName) ->
      FileN = rpc:call(refactorerl@localhost, 
         reflib_file, find, [FileName]),
      [Node] = rpc:call(refactorerl@localhost, 
                     reflib_query, exec, [FileN]),
      rpc:call(refactorerl@localhost, 
                refcore_fileman, drop, [FileName]),
      {file, Node};
      
rpc_call(Fun, Param) ->
   rpc:call(refactorerl@localhost, ri, Fun, [Param]).
      
rpc_call(Mod, Fun, Params) ->
    case length(Params) of
       0 -> rpc:call(refactorerl@localhost, Mod, Fun, []);
       _ -> rpc:call(refactorerl@localhost, Mod, Fun, [Params])
    end.

%================ RefactorErl start and stop ===============

refactorerl_internal(start) ->
    {
     os:cmd(refpath()++"/bin/starttool "++refpath()++" -server &"),
     erlang:set_cookie(node(), 'secretwookie'),
     started};

refactorerl_internal(reset) ->
    rpc:call(refactorerl@localhost, reflib_ui, reset, 
             [#msg_cb{broadcast = fun(_, _)-> stop end}]);
    
refactorerl_internal(stop) ->
    {_, StopMsg} = rpc:call(refactorerl@localhost, reflib_ui, stop, 
      [#msg_cb{broadcast = fun(_, _)-> stop end}]),
    {StopMsg, stopped}.

%=============== Handling function results (I/O) ===========

handleResult(Params) ->
    handleResult_(Params).
    %TODO format for the output

handleResult_({error, ErrH, ErrT})->
    io:format("CLIerror reason :: ~w ~w~n",[ErrH, ErrT]);
handleResult_({{format, F}, OtherRes}) ->
    io:format(F, [OtherRes]);
handleResult_({badrpc, nodedown}) ->
    handleResult_({{format, "~s~n"}, "refactorerl not running"});
handleResult_(OtherParams) ->
    io:format("~w~n",[OtherParams]).


to_atom(Str) when is_atom(Str) -> Str;
to_atom(Str) when is_binary(Str) -> 
         list_to_atom(binary_to_list(Str));
to_atom(Str) when is_list(Str) -> 
   try list_to_atom(Str) of Re -> Re
   catch error : _ ->  
     list_to_atom(
       binary_to_list(erlang:iolist_to_binary(Str)))
   end.

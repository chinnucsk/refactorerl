#!/usr/bin/env escript
%%% -*- erlang -*-
%%! -sname refactorerl_cli

%%% The  contents of this  file are  subject to  the Erlang  Public License,
%%% Version  1.1, (the  "License");  you may  not  use this  file except  in
%%% compliance  with the License.  You should  have received  a copy  of the
%%% Erlang  Public License  along  with this  software.  If not,  it can  be
%%% retrieved at http://plc.inf.elte.hu/erlang/
%%%
%%% Software  distributed under  the License  is distributed  on an  "AS IS"
%%% basis, WITHOUT  WARRANTY OF ANY  KIND, either expressed or  implied. See
%%% the License  for the specific language governing  rights and limitations
%%% under the License.
%%%
%%% The Original Code is RefactorErl.
%%%
%%% The Initial Developer of the  Original Code is Eötvös Loránd University.
%%% Portions created  by Eötvös  Loránd University are  Copyright 2009,
%%% Eötvös Loránd University. All Rights Reserved.

%%% RefactorErl command line interface (prototype)
%%%
%%% Setup:
%%% - Redefine referlpath() and referlnode()
%%% - chmod +x RefactorErl
%%% - You may also set up a system-level alias
%%%   (e.g. alias refactorerl='/pathtorefactorerl/bin/RefactorErl')
%%%
%%% Usage:
%%% - refactorerl fun       -- this calls ri:fun()
%%% - refactorerl mod fun param1 param2 ... paramN
%%% Note that terms should be enclosed by double quote marks.
%%% - refactorerl mod fun "{a1, 2}"

referlpath() -> ".".
referlnode() -> refactorerl@localhost.

main([]) ->
    format({format, "Give me some arguments!~n"});
main(Args) ->
    try
        format(rpc_call([parse(A) || A <- Args]))
    catch
        Class:Reason -> format({error, Class, Reason})
    end.

parse(Str) ->
    try
        {ok, Tokens, _} = erl_scan:string(string:concat(Str, ".")),
        {ok, Term}      = erl_parse:parse_term(Tokens),
        Term
    catch
        _:_ -> Str
    end.

%% -----------------------------------------------------------------------------

rpc_call([Fun])               -> rpc_call(Fun);
rpc_call([Mod, Fun | Params]) -> rpc_call(Mod, Fun, Params);

rpc_call(start) ->
    case net_adm:ping(referlnode()) of
        pong -> {format, "RefactorErl is already running at ~w.~n",
                 [referlnode()]};
        pang -> start_refactorerl()
    end;
rpc_call(Fun) when is_atom(Fun) -> rpc:call(referlnode(), ri, Fun, []).
rpc_call(Mod, Fun, Params)      -> rpc:call(referlnode(), Mod, Fun, Params).

start_refactorerl() ->
    {os:cmd(referlpath() ++ "/bin/starttool " ++ referlpath() ++ " -server &"),
     erlang:set_cookie(node(), 'secretwookie'),
     started}.

%% -----------------------------------------------------------------------------

format({error, Class, Reason}) ->
    io:format("[CLI error] ~w: ~w~n", [Class, Reason]);
format({error, Reason}) when is_list(Reason) ->
    io:format("[CLI error] ~s~n", [Reason]);
format({format, F}) ->
    format({format, F, []});
format({format, F, Params}) ->
    io:format(F, Params);
format({badrpc, nodedown}) ->
    format({format, "RefactorErl is not running at ~w.~n", [referlnode()]});
format(Params) ->
    io:format("~w~n", [Params]).
